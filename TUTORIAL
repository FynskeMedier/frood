	<p><em>Authors</em>: <a href="mailto:jers@fynskemedier.dk">Jens Riisom Schultz</a>, <a href="mailto:jsf@fynskemedier.dk">Johanes Skov Frandsen</a></p>
	<p><em>Since</em>: 2011-06-21</p>
	<p>Frood standardizes MVC in XOOPS.</p>

<h1>MVC</h1>

	<p>For an extensive description of MVC in general, read <a href="http://en.wikipedia.org/wiki/Model-view-controller">this wiki article</a>.</p>

<h1>The autoloader</h1>

	<p>Frood sets an autoloader up for you.</p>
	<p>To ensure your classes are autoloaded you simply need to place your classes in the correct files and the correct locations.</p>

	<h2>Class and file name conventions</h2>

		<p>Classes always start with the module name.</p>
		<p>Classes are defined in files with the same name as the class.</p>
		<p>Part of the file name may be the path to the file (confusing... see the examples).</p>

		<h3>Examples</h3>
		<p>
			<kbd>XoopsImageSomething</kbd> should be defined in one of:
			<ul>
				<li><kbd>XoopsImageSomething.php</kbd></li>
				<li><kbd>Xoops/ImageSomething.php</kbd></li>
				<li><kbd>XoopsImage/Something.php</kbd></li>
				<li><kbd>Xoops/Image/Something.php</kbd></li>
			</ul>
		</p>

	<h2>File locations</h2>

		<p>Frood will basically autoload all classes in <kbd>class/</kbd>.</p>
		<p>When in admin mode classes in <kbd>admin/class/</kbd> will also be autoloaded.</p>

		<ul>
			<li>Model classes should be placed in <kbd>class/model/</kbd>.</li>
			<li>Public controllers should be placed in <kbd>class/controllers/</kbd>.</li>
			<li>Private controllers should be placed in <kbd>admin/class/controllers/</kbd>.</li>
		</ul>

<h1>Controllers</h1>

	<p>TODO: Write this :)</p>

<script type="syntaxhighlighter" class="brush: php"><![CDATA[
echo 'example';
]]></script>

<h1>Extending the Frood controller</h1>
<p>It is not required to extend the Frood controller to make use of Frood, but to support legacy code is is usaly a good idea.</p>
<p>If you need to output something else than Froods builtin output renderers (XOOPS, SMARTY, JSON) or need access to global variables made available by XOOPS you also need to extend the Frood controller.</p>
<h2>Example</h2>
<p>In this example we overwrite the <kbd><a href="Frood/Class/FroodController.html#render">FroodController::render()</a></kbd> method to add a new output method <kbd>doOutputImage()</kbd> for outputting images. Additionally we need to create a method <kbd>_renderImage()</kbd> and a constant <kbd>_IMAGE</kbd>.</p>
<p>We also add a method <kbd>_requireHeader()</kbd> for including the header file for the module, as we need stuff from the XOOPS environment.</p>
<p>To make sure all our actions has access to XOOPS we overwrite <kbd><a href="Frood/Class/FroodController.html#__construct">FroodController::__construct()</a></kbd> and call the <kbd>_requireHeader()</kbd> there. If only some of your actions need XOOPS, you can also just call <kbd>_requireHeader()</kbd> on the individual actions. The latter is the better solution performance vice as loading the whole XOOPS enviroment if you don't need it is kind of overkill. The former is convenient if you know you need it for all your actions.</p>
<script type="syntaxhighlighter" class="brush: php"><![CDATA[
abstract class SomeController extends FroodController {

	/** @var string Output mode Image. */
	const _IMAGE = 'Image';

	/**
	 * Construct a new controller instance.
	 * This is automatically called from The Frood.
	 *
	 * @param string  $module  The module we're working with.
	 * @param boolean $isAdmin Are we handling admin pages?
	 *
	 * @return void
	 */
	public function __construct($module, $isAdmin = false) {
		parent::__construct($module, $isAdmin);
		$this->_requireHeader();
	}

	/**
	 * Render the output.
	 * The Frood calls this when appropriate.
	 *
	 * @param string $action The action to render the view for.
	 *
	 * @return void
	 *
	 * @throws RuntimeException For undefined output modes.
	 */
	public function render($action) {
		switch ($this->_getOutputMode()) {
			case self::_IMAGE:
				$this->_renderImage($action);
				break;
			default:
				parent::render($action);
				break;
		}
	}

	/**
	 * Include the header file for xoops specific includes
	 *
	 * @return void
	 */
	protected function _requireHeader() {
		include_once dirname(__FILE__) . '/../../../header.php';
	}

	/**
	 * Set the output mode to image.
	 *
	 * @return void
	 */
	final public function doOutputImage() {
		$this->_doOutput(self::_IMAGE);
	}

	/**
	 * Render the output as an image.
	 *
	 * @param string $action The action to render the view for.
	 *
	 * @return string The rendered output.
	 */
	private function _renderImage($action) {
		$image = new XphotoImage($this->_getValue('imageId'));
		header('Content-Type: '.$image->getMimeType());
		header("Content-Disposition: attachment; filename=\"".$this->_getValue('imageId').$image->getExtension()."\"");
		header('Content-Length: '.filesize($image->getFile(true)));
		echo file_get_contents($image->getFile(true));
	}
}
]]></script>
