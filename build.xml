<?xml version="1.0" encoding="UTF-8"?>
<project name="frood" default="build" basedir=".">
	<property name="modulename" value="Frood" />

	<!-- ================ PHPUNIT Settings ==================== -->
	<property name="phpunit.testdir" value="${basedir}/tests" />

	<!-- ================ PHPCPD Settings ==================== -->
	<!-- Comma separated list of folders to include -->
	<property name="phpcpd.include" value="${basedir}/src/" />
	<!-- Comma separated list of files to exclude -->
	<property name="phpcpd.exclude" value="" />
	<!-- Should we fail the build if copy past violations are detected? -->
	<property name="phpcpd.failonerror" value="true" />

	<!-- ================ PHPMD Settings ===================== -->
	<!-- Comma separated list of folders to include -->
	<property name="phpmd.include" value="${basedir}/src/,${basedir}/tests/" />
	<!-- Comma separated list of files to exclude -->
	<property name="phpmd.exclude" value="" />
	<!-- Path to rules file -->
	<property name="phpmd.rules" value="${basedir}/tests/rules.xml" />
	<!-- Should we fail the build if pmd violations are detected? -->
	<property name="phpmd.failonerror" value="true" />

	<!-- ================ PHPCS Settings ===================== -->
	<!-- SPACE separated list of folders to include -->
	<property name="phpcs.include" value="${basedir}/src/ ${basedir}/tests/" />
	<!-- Comma separated list of files to exclude -->
	<property name="phpcs.exclude" value="" />
	<!-- Should we fail the build if coding standart violations are detected? -->
	<property name="phpcs.failonerror" value="true" />

	<!-- ================ PHPDOC Settings ==================== -->
	<!-- Comma separated list of folders to include -->
	<property name="phpdoc.include.dir" value="." />
	<!-- Comma separated list of files to include -->
	<property name="phpdoc.include.file" value="" />
	<!-- Comma separated list of files to exclude -->
	<property name="phpdoc.exclude" value="*/tools/*,*/tests/*" />
	<!-- Path to example files -->
	<property name="phpdoc.examples" value="" />

	<!-- ================ PHPLOC Settings ==================== -->
	<!-- Comma separated list of folders to include -->
	<property name="phploc.include" value="${basedir}/src/" />
	<!-- Comma separated list of files to exclude -->
	<property name="phploc.exclude" value="" />

	<!-- ================ PHPDEPEND Settings ================= -->
	<!-- Comma separated list of folders to include -->
	<property name="phpdepend.include" value="${basedir}/src/" />
	<!-- Comma separated list of files to exclude -->
	<property name="phpdepend.exclude" value="" />

	<!-- ================ PHP LINT Settings ================== -->
	<!-- Php files to syntax check -->
	<path id="checkphp.fileset">
		<fileset dir="${basedir}">
			<include name="src/**/*.php" />
			<include name="tests/**/*.php" />
		</fileset>
	</path>

	<!-- You won't usually need to change anything below this line -->

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${basedir}/tools/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<property name="build" value="build" />

	<!-- ================================= target: init ================================== -->
	<target name="init" description="Create requried folders for build">
		<mkdir dir="${build}/logs" />
		<mkdir dir="${build}/api" />
		<mkdir dir="${build}/coverage" />
		<mkdir dir="${build}/php-code-browser" />
		<mkdir dir="${build}/pdepend" />
	</target>

	<!-- ================================= target: cleanup =============================== -->
	<target name="clean" depends="" description="Clean up in build folder">
		<delete dir="${build}" />
	</target>

	<!-- ================================= target: basebuild ============================= -->
	<target name="basebuild" depends="checkphp, clean, init, phpunit, parallelTasks" description="Base build">
	</target>

	<!-- ================================= target: build ================================= -->
	<target name="build" depends="basebuild" description="Build">
		<antcall target="phploc" />
	</target>

	<!-- ================================= target: ccbuild =============================== -->
	<target name="ccbuild" depends="basebuild" description="Build on CC">
		<antcall target="phpcpd" />
		<antcall target="phplocCC" />
		<antcall target="phpcb" />
		<ant antfile="deploy.xml" target="tagLatest" />
	</target>

	<!-- ================================= target: jenkinsbuild =============================== -->
	<target name="jenkinsbuild" depends="basebuild" description="Build on Jenkins">
		<antcall target="phpcpd" />
		<antcall target="phplocCC" />
		<antcall target="phpcb" />
	</target>

	<!-- ================================= target: ParallelTasks =============================== -->
	<target name="parallelTasks" description="Run the pdepend, phpmd, phpdoc and phpcs tasks in parallel using a maximum of 2 threads.">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend" />
				<antcall target="phpmd" />
			</sequential>
			<antcall target="phpcs" />
			<antcall target="phpdoc" />
		</parallel>
	</target>

	<!-- ================================= target: checkphp ============================== -->
	<target name="checkphp" description="Check php syntax">
		<apply executable="php" failonerror="true">
			<arg value="-l" />
			<path refid="checkphp.fileset" />
		</apply>
	</target>

	<!-- ================================= target: phpunit =============================== -->
	<target name="phpunit" description="Run phpunit tests">
		<delete dir="${basedir}/${build}/logs" />
		<mkdir dir="${basedir}/${build}/logs" />
		<exec executable="phpunit" dir="${phpunit.testdir}" failonerror="true">
			<arg line="--configuration phpunit.xml" />
		</exec>
	</target>

	<!-- ================================= target: phpcodebrowser =============================== -->
	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
		<exec executable="phpcb">
			<arg line="--log ${basedir}/${build}/logs
	                   --source ${basedir}
	                   --output ${basedir}/build/php-code-browser" />
		</exec>
	</target>

	<!-- ================================= target: phpmd ================================= -->
	<target name="phpmd" description="Php mess detector">
		<if>
			<equals arg1="${phpmd.exclude}" arg2="" />
			<then>
				<exec executable="phpmd" dir="${basedir}">
					<arg line="${phpmd.include} html ${phpmd.rules}" />
					<arg line="--reportfile ${basedir}/${build}/logs/pmd.html" />
					<arg line="--suffixes php" />
				</exec>
				<exec executable="phpmd" dir="${basedir}">
					<arg line="${phpmd.include} xml ${phpmd.rules}" />
					<arg line="--reportfile ${basedir}/${build}/logs/pmd.xml" />
					<arg line="--suffixes php" />
				</exec>
			</then>
			<else>
				<exec executable="phpmd" dir="${basedir}">
					<arg line="${phpmd.include} html ${phpmd.rules}" />
					<arg line="--reportfile ${basedir}/${build}/logs/pmd.html" />
					<arg line="--suffixes php" />
					<arg line="--exclude ${phpmd.exclude}" />
				</exec>
				<exec executable="phpmd" dir="${basedir}">
					<arg line="${phpmd.include} xml ${phpmd.rules}" />
					<arg line="--reportfile ${basedir}/${build}/logs/pmd.xml" />
					<arg line="--suffixes php" />
					<arg line="--exclude ${phpmd.exclude}" />
				</exec>
			</else>
		</if>
		<exec executable="grep" outputproperty="phpmd.result">
			<arg line="--max-count=1" />
			<arg line="'file'" />
			<arg line="${basedir}/${build}/logs/pmd.xml" />
		</exec>
		<if>
			<equals arg1="${phpmd.result}" arg2="" />
			<then>
				<echo>PHPMD reported no violations</echo>
			</then>
			<else>
				<if>
					<equals arg1="${phpmd.failonerror}" arg2="true" />
					<then>
						<fail message="PHPMD reported violations" />
					</then>
				</if>
			</else>
		</if>
	</target>

	<!-- ================================= target: phpcs ================================ -->
	<target name="phpcs" description="Php codesniffer utility">
		<if>
			<equals arg1="${phpcs.exclude}" arg2="" />
			<then>
				<exec dir="${basedir}" executable="phpcs" output="${basedir}/${build}/logs/checkstyle.xml">
					<arg line="--report=checkstyle" />
					<arg line="--standard=${basedir}/tools/FynskeMedier/" />
					<arg line="--extensions=php" />
					<arg line="--tab-width=4" />
					<arg line="-n" />
					<arg line="${phpcs.include}" />
				</exec>
			</then>
			<else>
				<exec dir="${basedir}" executable="phpcs" output="${basedir}/${build}/logs/checkstyle.xml">
					<arg line="--report=checkstyle" />
					<arg line="--standard=${basedir}/tools/FynskeMedier/" />
					<arg line="--extensions=php" />
					<arg line="--ignore=${phpcs.exclude}" />
					<arg line="--tab-width=4" />
					<arg line="-n" />
					<arg line="${phpcs.include}" />
				</exec>
			</else>
		</if>
		<xslt in="${basedir}/${build}/logs/checkstyle.xml" out="${basedir}/${build}/logs/checkstyle.html" style="tools/CheckStyleReport/codestyle.xsl">
		</xslt>
		<copy file="${basedir}/tools/CheckStyleReport/cs.css" tofile="${basedir}/${build}/logs/cs.css" />
		<exec executable="grep" outputproperty="phpcs.result">
			<arg line="--max-count=1" />
			<arg line="'error'" />
			<arg line="${basedir}/${build}/logs/checkstyle.xml" />
		</exec>
		<if>
			<equals arg1="${phpcs.result}" arg2="" />
			<then>
				<echo>PHPCS reported no violations</echo>
			</then>
			<else>
				<if>
					<equals arg1="${phpcs.failonerror}" arg2="true" />
					<then>
						<fail message="PHPCS reported violations" />
					</then>
				</if>
			</else>
		</if>
	</target>

	<!-- ================================= target: phpcpd ================================ -->
	<target name="phpcpd" description="Php copy-paste detection">
		<if>
			<equals arg1="${phpcpd.exclude}" arg2="" />
			<then>
				<exec executable="phpcpd" failonerror="${phpcpd.failonerror}">
					<arg line="--log-pmd ${basedir}/${build}/logs/pmd-cpd.xml" />
					<arg line="${phpcpd.include}" />
				</exec>
			</then>
			<else>
				<exec executable="phpcpd" failonerror="${phpcpd.failonerror}">
					<arg line="--log-pmd ${basedir}/${build}/logs/pmd-cpd.xml" />
					<arg line="--exclude ${phpcpd.exclude}" />
					<arg line="${phpcpd.include}" />
				</exec>
			</else>
		</if>
	</target>

	<!-- ================================= target: pdepend =============================== -->
	<target name="pdepend" description="Generate jdepend.xml and software metrics charts using PHP_Depend">
		<if>
			<equals arg1="${phpdepend.exclude}" arg2="" />
			<then>
				<exec executable="pdepend">
					<arg line="--jdepend-xml=${basedir}/${build}/logs/jdepend.xml" />
					<arg line="--jdepend-chart=${basedir}/${build}/pdepend/10-dependencies.svg" />
					<arg line="--overview-pyramid=${basedir}/${build}/pdepend/11-overview-pyramid.svg" />
					<arg line="${phpdepend.include}" />
				</exec>
			</then>
			<else>
				<exec executable="pdepend">
					<arg line="--jdepend-xml=${basedir}/${build}/logs/jdepend.xml" />
					<arg line="--jdepend-chart=${basedir}/${build}/pdepend/10-dependencies.svg" />
					<arg line="--overview-pyramid=${basedir}/${build}/pdepend/11-overview-pyramid.svg" />
					<arg line="--ignore=${phpdepend.include}" />
					<arg line="${phpdepend.exclude}" />
				</exec>
			</else>
		</if>
	</target>

	<!-- ================================= target: phpdoc ================================ -->
	<target name="phpdoc" description="Phpdoc utility">
		<delete dir="${basedir}/${build}/api" />
		<mkdir dir="${basedir}/${build}/api" />

		<if>
			<equals arg1="${phpdoc.exclude}" arg2="" />
			<then>
				<if>
					<equals arg1="${phpdoc.include.file}" arg2="" />
					<then>
						<exec dir="${basedir}" executable="phpdoc" failonerror="true">
							<arg line="--directory ${phpdoc.include.dir}" />
							<arg line="--ignoresymlinks on" />
							<arg line="--quiet on" />
							<arg line="--undocumentedelements on" />
							<arg line="--readmeinstallchangelog README,CHANGELOG,INSTALL,TUTORIAL,TUTORIAL" />
							<arg line="--sourcecode on" />
							<arg line="--title 'Phpdoc for ${ant.project.name}'" />
							<arg line="--defaultpackagename ${modulename}" />
							<arg line="--defaultcategoryname ${modulename}" />
							<arg line="--target ${basedir}/${build}/api" />
							<arg line="--examplesdir ${phpdoc.examples}" />
							<arg line="--output 'HTML:Phpuc:phpuc'" />
							<arg line="--templatebase '${basedir}/tools/phpdocTemplate'" />
						</exec>
					</then>
					<else>
						<exec dir="${basedir}" executable="phpdoc" failonerror="true">
							<arg line="--directory ${phpdoc.include.dir}" />
							<arg line="--ignoresymlinks on" />
							<arg line="--quiet on" />
							<arg line="--undocumentedelements on" />
							<arg line="--readmeinstallchangelog README,CHANGELOG,INSTALL,TUTORIAL" />
							<arg line="--sourcecode on" />
							<arg line="--title 'Phpdoc for ${ant.project.name}'" />
							<arg line="--defaultpackagename ${modulename}" />
							<arg line="--defaultcategoryname ${modulename}" />
							<arg line="--target ${basedir}/${build}/api" />
							<arg line="--examplesdir ${phpdoc.examples}" />
							<arg line="--filename ${phpdoc.include.file}" />
							<arg line="--output 'HTML:Phpuc:phpuc'" />
							<arg line="--templatebase '${basedir}/tools/phpdocTemplate'" />
						</exec>
					</else>
				</if>
			</then>
			<else>
				<if>
					<equals arg1="${phpdoc.include.file}" arg2="" />
					<then>
						<exec dir="${basedir}" executable="phpdoc" failonerror="true">
							<arg line="--directory ${phpdoc.include.dir}" />
							<arg line="--ignoresymlinks on" />
							<arg line="--quiet on" />
							<arg line="--undocumentedelements on" />
							<arg line="--readmeinstallchangelog README,CHANGELOG,INSTALL,TUTORIAL" />
							<arg line="--sourcecode on" />
							<arg line="--title 'Phpdoc for ${ant.project.name}'" />
							<arg line="--defaultpackagename ${modulename}" />
							<arg line="--defaultcategoryname ${modulename}" />
							<arg line="--target ${basedir}/${build}/api" />
							<arg line="--examplesdir ${phpdoc.examples}" />
							<arg line="--ignore ${phpdoc.exclude}" />
							<arg line="--output 'HTML:Phpuc:phpuc'" />
							<arg line="--templatebase '${basedir}/tools/phpdocTemplate'" />
						</exec>
					</then>
					<else>
						<exec dir="${basedir}" executable="phpdoc" failonerror="true">
							<arg line="--directory ${phpdoc.include.dir}" />
							<arg line="--ignoresymlinks on" />
							<arg line="--quiet on" />
							<arg line="--undocumentedelements on" />
							<arg line="--readmeinstallchangelog README,CHANGELOG,INSTALL,TUTORIAL" />
							<arg line="--sourcecode on" />
							<arg line="--title 'Phpdoc for ${ant.project.name}'" />
							<arg line="--defaultpackagename ${modulename}" />
							<arg line="--defaultcategoryname ${modulename}" />
							<arg line="--target ${basedir}/${build}/api" />
							<arg line="--examplesdir ${phpdoc.examples}" />
							<arg line="--filename ${phpdoc.include.file}" />
							<arg line="--ignore ${phpdoc.exclude}" />
							<arg line="--output 'HTML:Phpuc:phpuc'" />
							<arg line="--templatebase '${basedir}/tools/phpdocTemplate'" />
						</exec>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- ================================= target: phploc ================================= -->
	<target name="phploc" description="Generate phploc.xml">
		<if>
			<equals arg1="${phploc.exclude}" arg2="" />
			<then>
				<exec executable="phploc">
					<arg line="--log-xml ${basedir}/build/logs/phploc.xml" />
					<arg line="${phploc.include}" />
				</exec>
			</then>
			<else>
				<exec executable="phploc">
					<arg line="--log-xml ${basedir}/build/logs/phploc.xml" />
					<arg line="--exclude ${phploc.exclude}" />
					<arg line="${phploc.include}" />
				</exec>
			</else>
		</if>
	</target>

	<!-- ================================= target: phplocCC ================================= -->
	<target name="phplocCC" description="Generate phploc.csv">
		<if>
			<equals arg1="${phploc.exclude}" arg2="" />
			<then>
				<exec executable="phploc">
					<arg line="--log-csv ${basedir}/build/logs/phploc.csv" />
					<arg line="${phploc.include}" />
				</exec>
			</then>
			<else>
				<exec executable="phploc">
					<arg line="--log-csv ${basedir}/build/logs/phploc.csv" />
					<arg line="--exclude ${phploc.exclude}" />
					<arg line="${phploc.include}" />
				</exec>
			</else>
		</if>
	</target>
</project>